Description: >

    This template deploys an EC2 instance with OpenVPN-Pritunl services.

Parameters:

    VPCClusterName:
        Description: The VPC Name on CloudFormation Exports
        Type: String

    AMIBaseId:
        Description: AMI base prepared with OpenVPN-Pritunl to launch the EC2 instance
        Type: AWS::EC2::Image::Id

    KeyName:
        Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS cluster
        Type: AWS::EC2::KeyPair::KeyName

    MongoBackupBucket:
        Description: S3 Bucket containing MongoDB Backup
        Type: String

    VPNDomain:
        Description: Route53 domain to create an "vpn" entry
        Type: String

    VPNSubnet:
        Description: CIDR network block to be used internally by VPN clients. Have to be different than the VPN CIDR block.
        Type: String

    ApplyResources:
        Description: Let the VPN server up and Running
        Type: String
        Default: 'no'
        AllowedValues: ['no', 'yes']


Conditions:
    ShouldApplyResource: !Equals [ !Ref ApplyResources, 'yes' ]


Metadata:

    AWS::CloudFormation::Interface:
        ParameterGroups:
            - Label:
                default: VPN Settings
              Parameters:
                - VPCClusterName
                - AMIBaseId
                - KeyName
        ParameterLabels:
            VPCClusterName:
                default: VPC Exported name
            AMIBaseId:
                default: AMI Base Id
            KeyName: 
                default: SSH Key Name

Resources:

    EC2AutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Condition: ShouldApplyResource
        Properties: 
            VPCZoneIdentifier:
                Fn::Split:
                    - ','
                    - Fn::ImportValue: !Sub ${VPCClusterName}-public-subnets
            LaunchConfigurationName: !Ref EC2LaunchConfiguration
            MinSize: 1
            MaxSize: 2
            DesiredCapacity: 1
            Tags: 
                - Key: Name
                  Value: !Sub ${AWS::StackName}
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal: 
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT15M
                WaitOnResourceSignals: true

    EC2LaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Condition: ShouldApplyResource
        Properties:
            ImageId: !Ref AMIBaseId
            InstanceType: t2.nano
            SecurityGroups: 
                - !Ref SecurityGroup
            IamInstanceProfile: !Ref EC2InstanceProfile
            KeyName: !Ref KeyName
            UserData: 
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    attach_to_vpc.py ${VPNDomain} ${VPNSubnet}
                    mongodb_restore.sh ${MongoBackupBucket} vpn.${VPNDomain} pritunl
                    echo "0 */12 * * * root /usr/local/bin/mongodb_backup.sh ${MongoBackupBucket} vpn.${VPNDomain} pritunl" > /etc/cron.d/pritunl-backup
                    pritunl set-mongodb mongodb://localhost:27017/pritunl
                    service pritunl restart
                    /usr/local/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2AutoScalingGroup

    # This security group defines who/where is allowed to access the EC2 instance directly.
    # By default we're just allowing access from the load balancer.  If you want to SSH 
    # into the hosts, or expose non-load balanced services you can open their ports here.
    SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            VpcId:
                Fn::ImportValue: !Sub ${VPCClusterName}
            GroupDescription: Access to the VPN/EC2 instance
            SecurityGroupIngress:
                # Allow SSH access from anywhere to our EC2 instance
                - CidrIp: !Ref VPNSubnet
                  FromPort: '22'
                  ToPort: '22'
                  IpProtocol: tcp
                - CidrIp: 0.0.0.0/0
                  FromPort: '443'
                  ToPort: '443'
                  IpProtocol: tcp
                - CidrIp: 0.0.0.0/0
                  FromPort: '0'
                  ToPort: '65535'
                  IpProtocol: udp
                - CidrIp: 0.0.0.0/0
                  FromPort: '80'
                  ToPort: '80'
                  IpProtocol: tcp
            Tags: 
                - Key: Name
                  Value: !Sub ${AWS::StackName}

    # This IAM Role is attached to the VPN host.
    EC2Role:
        Type: AWS::IAM::Role
        Condition: ShouldApplyResource
        Properties: 
            Path: /
            RoleName: !Sub ${AWS::StackName}-EC2RoleNormal-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: ec2-vpn-service
                  PolicyDocument: !Sub |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ec2:DescribeRouteTables",
                                "ec2:DescribeInstances",
                                "ec2:ReplaceRoute",
                                "ec2:CreateRoute",
                                "route53:ListHostedZonesByName",
                                "route53:ListResourceRecordSets",
                                "route53:ChangeResourceRecordSets"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject",
                                "s3:HeadObject",
                                "s3:PutObject"
                            ],
                            "Resource": "arn:aws:s3:::${MongoBackupBucket}/*"
                        }]
                    }

    EC2InstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Condition: ShouldApplyResource
        Properties:
            Path: /
            Roles: 
                - !Ref EC2Role
